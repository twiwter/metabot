from aiogram import types
from dispatcher import dp, bot
from db import BotDB
import config
from string import Template
import handlers.templates.personal_actions_templates as pa
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
import re
import os

from handlers.sheets import send_values_to_table

from handlers.states.UsersStates import Stories, Client, Consult, SendOut



@dp.message_handler(content_types="text")
async def user_messages(message: types.Message):
    database = BotDB(os.environ.get("HOST"), os.environ.get("USER"), os.environ.get("PASSWORD"), os.environ.get("DB"))
    if(database.user_exist(message.from_user.id)):
        if(message.from_user.id != 447002854 and message.from_user.id != 712140726):
            text = re.sub(r'[^\w\s]','', message.text).lower()
            keys = ["—Å—Ç–æ—Ä—ñ—Å", "–∫–ª—ñ—î–Ω—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", "–∫–ª—ñ—î–Ω—Ça", "—Ä–æ–∑—Å–∏–ª–∫–∞", "—Ä–æ–∑—Å–∏–ª–∫—É"]

            crew = ""

            for key in keys:
                if key in text:
                    crew = key
                    break
            
            if crew == "—Å—Ç–æ—Ä—ñ—Å":
                await message.reply("–ú–æ–ª–æ–¥–µ—Ü—å üëè –°—Ç–æ—Ä—ñ—Å –≤–∞–∂–ª–∏–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ –ø–æ–±—É–¥–æ–≤–∏ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –±—Ä–µ–Ω–¥—É, —Ç–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!\n\n–í—ñ–¥–ø—Ä–∞–≤ –±–æ—Ç—É —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–≤–æ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ Instagram üëá")
                await Stories.photo.set()
            elif crew in ["—Ä–æ–∑—Å–∏–ª–∫–∞", "—Ä–æ–∑—Å–∏–ª–∫—É"]:
                await message.reply("–ú–æ–ª–æ–¥–µ—Ü—å üëè –†–æ–∑—Å–∏–ª–∫–∞ —Ü–µ –æ–¥–∏–Ω —ñ–∑ –º–µ—Ç–æ–¥—ñ–≤ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –π–æ–≥–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏)\n\n–í—ñ–¥–ø—Ä–∞–≤ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑—Å–∏–ª–æ–∫, —è–∫—É —Ç–∏ –∑—Ä–æ–±–∏–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ üëá")
                await SendOut.count.set()
            elif crew in ["–∫–ª—ñ—î–Ω—Ç", "–∫–ª—ñ—î–Ω—Ça"]:
                await message.reply("–¢–∞ –Ω—É! –ê –Ω—É —Ö–≤–∞–ª–∏—Å—è!\n\n–í—ñ–¥–ø—Ä–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ üëá")
                await Client.link.set()
            elif crew in ["–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é"]:
                await message.reply("–í–∂–µ –ø—Ä–æ–≤–æ–¥–∏—à –æ—Å–æ–±–∏—Å—Ç—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó? –ú–æ—è —Ç–∏ —Ä–∞–¥—ñ—Å—Ç—å )\n\n–í—ñ–¥–ø—Ä–∞–≤ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ üëá")
                await Consult.link.set()
            else:
                await message.reply("—â–æ?")
        else:
            await message.reply("–¢–∞ –Ω–µ, –Ω–µ —Ç—Ä–µ–±–∞ )")

    else:
        await message.reply("–í–∏–±–∞—á–∞–π, –¥—Ä—É–∂–µ, –∞–ª–µ —Ç–æ–±—ñ —Ü–µ–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π )")

# You can use state '*' if you need to handle all states
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    """Allow user to cancel any action"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply('–í—ñ–¥—Ö–∏–ª–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

# Stories
@dp.message_handler(lambda message: message.content_type != "photo", state=Stories.photo)
async def process_content_type_invalid(message: types.Message):
    await message.reply("–Ø –≥–æ–≤–æ—Ä–∏–≤ —Ñ–æ—Ç–æ! üò° \n–ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É –∑–Ω—ñ–º—É 1 –±–∞–ª! \n\n–í—ñ–¥–ø—Ä–∞–≤ –±–æ—Ç—É –°–ö–†–Ü–ù–®–û–¢ —Ç–≤–æ—î—ó —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ Instagram üëá")

@dp.message_handler(content_types=["photo"], state=Stories.photo)
async def process_stories(message: types.Message, state: FSMContext):
    database = BotDB(os.environ.get("HOST"), os.environ.get("USER"), os.environ.get("PASSWORD"), os.environ.get("DB"))
    user_id = message.from_user.id
    operation_name = "—Å—Ç–æ—Ä–∏—Å"
    score = 1

    database.add_operation(user_id, "stories", score)
    data = database.get_user_information(user_id)
    database.update_score(user_id, 1)

    table_name = f"{data[2]}_{user_id}"

    # send_values_to_table(table_name, operation_name, score)

    await message.answer("–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! ‚úÖ \n\n–¢–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è 1 –±–∞–ª! üéñ")
    await state.finish()

# SendOut
@dp.message_handler(lambda message: not message.text.isdigit(), state=SendOut.count)
async def process_content_invalid(message: types.Message):
    await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í—ñ–¥–ø—Ä–∞–≤ —â–µ —Ä–∞–∑!")

@dp.message_handler(state=SendOut.count)
async def process_count_send_out(message: types.Message, state: FSMContext):
    count = int(message.text)
    database = BotDB(os.environ.get("HOST"), os.environ.get("USER"), os.environ.get("PASSWORD"), os.environ.get("DB"))
    if (count < 10):
        await message.answer("–¶–µ –¥—É–∂–µ –º–∞–ª–æ...")
    else:
        score = count // 10 * 3

        user_id = message.from_user.id
        operation_name = "—Ä–∞—Å—Å—ã–ª–∫–∞"

        database.add_operation(user_id, "sendout", score)
        database.update_score(user_id, score)
        data = database.get_user_information(user_id)

        table_name = f"{data[2]}_{user_id}"
        send_values_to_table(table_name, operation_name, score)

        await message.answer(f"–û—Ç—Ä–∏–º–∞–Ω–æ! ‚úÖ \n\n–¢–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è {score} –±–∞–ª! üéñ")

    await state.finish()

# Client
@dp.message_handler(state=Client.link)
async def process_client_link(message: types.Message, state: FSMContext):
    await Client.next()
    async with state.proxy() as data:
        data['link'] = message.text

    await message.answer("–ê —Ç–µ–ø–µ—Ä —á–µ–∫, —Ö–≤–∞–ª–∏—Å—å ))\n–¶—ñ–Ω—É –ø–∏—à–∏ –≤ $$$ üëá")

@dp.message_handler(lambda message: not message.text.isdigit(), state=Client.amount)
async def process_content_invalid(message: types.Message):
    await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É! –í—ñ–¥–ø—Ä–∞–≤ —â–µ —Ä–∞–∑!")

@dp.message_handler(lambda message: int(message.text) <= 0, state=Client.amount)
async def process_content_invalid(message: types.Message):
    await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É! –í—ñ–¥–ø—Ä–∞–≤ —â–µ —Ä–∞–∑!")

@dp.message_handler(state=Client.amount)
async def process_client_amount(message: types.Message, state: FSMContext):
    database = BotDB(os.environ.get("HOST"), os.environ.get("USER"), os.environ.get("PASSWORD"), os.environ.get("DB"))
    async with state.proxy() as data:
        data['amount'] = int(message.text)

    if (data['amount'] > 0 and data['amount'] < 100):
        score = 20
    elif (data['amount'] >= 100 and data['amount'] < 200):
        score = 30
    elif (data['amount'] >= 200 and data['amount'] <= 300):
        score = 40
    elif (data['amount'] > 300):
        score = 50

    user_id = message.from_user.id
    operation_name = "–∫–ª–∏–µ–Ω—Ç"

    # print(data) # FSMContextProxy state = 'Client:amount', data = {'link': '–ø–æ—Å–∏–ª–∞–Ω–Ω—è', 'amount': 200}, closed = True

    database.add_operation(user_id, "client", score, data["link"], data["amount"])
    database.update_score(user_id, score)
    database.update_clients_count(user_id, 1)
    user_info = database.get_user_information(user_id)

    table_name = f"{user_info[2]}_{user_id}"
    print(data)

    link = str(data["link"])
    amount = int(data["amount"])

    send_values_to_table(table_name, operation_name, score, link, amount)

    await message.answer(f"–û—Ç—Ä–∏–º–∞–Ω–æ! ‚úÖ \n\n–¢–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è {score} –±–∞–ª—ñ–≤! üèÜ")

    await state.finish() 

    # database.add_operation(user_id, "sendout", score, data['age'])

# Consult
@dp.message_handler(state=Consult.link)
async def process_consult_link(message: types.Message, state: FSMContext):
    await Consult.next()
    async with state.proxy() as data:
        data['link'] = message.text

    await message.answer("–ê —Ç–µ–ø–µ—Ä —á–µ–∫, —Ö–≤–∞–ª–∏—Å—å ))\n–¶—ñ–Ω—É –ø–∏—à–∏ –≤ $$$ üëá")

@dp.message_handler(lambda message: not message.text.isdigit(), state=Consult.amount)
async def process_content_invalid(message: types.Message):
    await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É! –í—ñ–¥–ø—Ä–∞–≤ —â–µ —Ä–∞–∑!")

@dp.message_handler(lambda message: int(message.text) <= 0, state=Consult.amount)
async def process_content_invalid(message: types.Message):
    await message.reply("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É! –í—ñ–¥–ø—Ä–∞–≤ —â–µ —Ä–∞–∑!")

@dp.message_handler(state=Consult.amount)
async def process_consult_amount(message: types.Message, state: FSMContext):
    database = BotDB(os.environ.get("HOST"), os.environ.get("USER"), os.environ.get("PASSWORD"), os.environ.get("DB"))
    async with state.proxy() as data:
        data['amount'] = int(message.text)

    if (data['amount'] == 0):
        score = 5
    elif (data['amount'] > 0 and data['amount'] < 30):
        score = 10
    elif (data['amount'] >= 30 and data['amount'] < 60):
        score = 15
    elif (data['amount'] >= 60 and data['amount'] <= 100):
        score = 20
    elif (data['amount'] > 101):
        score = 30

    user_id = message.from_user.id
    operation_name = "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"

    # print(data) # FSMContextProxy state = 'Client:amount', data = {'link': '–ø–æ—Å–∏–ª–∞–Ω–Ω—è', 'amount': 200}, closed = True

    database.add_operation(user_id, "consult", score, data["link"], data["amount"])
    database.update_score(user_id, score)
    database.update_consults_count(user_id, 1)
    user_info = database.get_user_information(user_id)

    table_name = f"{user_info[2]}_{user_id}"
    print(data)

    link = str(data["link"])
    amount = int(data["amount"])

    # send_values_to_table(table_name, operation_name, score, link, amount)

    await message.answer(f"–û—Ç—Ä–∏–º–∞–Ω–æ! ‚úÖ \n\n–¢–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è {score} –±–∞–ª—ñ–≤! üèÜ")

    await state.finish() 

    # database.add_operation(user_id, "sendout", score, data['age'])
